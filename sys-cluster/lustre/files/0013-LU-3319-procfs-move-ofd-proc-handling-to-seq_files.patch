From 8fa5fb0ecac2a7b0279e0010bfe74acb107c37d8 Mon Sep 17 00:00:00 2001
From: James Simmons <uja.ornl@gmail.com>
Date: Thu, 14 Nov 2013 19:47:36 -0500
Subject: [PATCH 13/18] LU-3319 procfs: move ofd proc handling to seq_files

With 3.10 linux kernel and above proc handling now only
uses struct seq_files. This patch migrates the ofd
layer proc entries over to using seq_files.

Signed-off-by: James Simmons <uja.ornl@gmail.com>
Change-Id: Id8f77d72fd35755f1b7b1c17fcf27e0731bd5ac1
---
 lustre/obdclass/lprocfs_status.c |   9 +-
 lustre/ofd/lproc_ofd.c           | 352 +++++++++++++++++----------------------
 lustre/ofd/ofd_dev.c             |  41 ++---
 lustre/ofd/ofd_internal.h        |   7 +-
 4 files changed, 180 insertions(+), 229 deletions(-)

diff --git a/lustre/obdclass/lprocfs_status.c b/lustre/obdclass/lprocfs_status.c
index a33cbf2..bd6741e 100644
--- a/lustre/obdclass/lprocfs_status.c
+++ b/lustre/obdclass/lprocfs_status.c
@@ -387,11 +387,10 @@ EXPORT_SYMBOL(lprocfs_evict_client_seq_write);
 #undef BUFLEN
 
 struct file_operations lprocfs_evict_client_fops = {
-        .owner = THIS_MODULE,
-        .read = lprocfs_fops_read,
-        .write = lprocfs_fops_write,
-        .open = lprocfs_evict_client_open,
-        .release = lprocfs_evict_client_release,
+	.owner		= THIS_MODULE,
+	.open		= lprocfs_evict_client_open,
+	.release	= lprocfs_evict_client_release,
+	.write		= lprocfs_evict_client_seq_write,
 };
 EXPORT_SYMBOL(lprocfs_evict_client_fops);
 #endif
diff --git a/lustre/ofd/lproc_ofd.c b/lustre/ofd/lproc_ofd.c
index 4354497..f462d63 100644
--- a/lustre/ofd/lproc_ofd.c
+++ b/lustre/ofd/lproc_ofd.c
@@ -46,80 +46,74 @@
 
 #ifdef LPROCFS
 
-static int lprocfs_ofd_rd_seqs(char *page, char **start, off_t off,
-				int count, int *eof, void *data)
+static int ofd_seqs_seq_show(struct seq_file *m, void *data)
 {
-	struct obd_device *obd = (struct obd_device *)data;
+	struct obd_device *obd = m->private;
 	struct ofd_device *ofd = ofd_dev(obd->obd_lu_dev);
 
-	*eof = 1;
-	return snprintf(page, count, "%u\n", ofd->ofd_seq_count);
+	return seq_printf(m, "%u\n", ofd->ofd_seq_count);
 }
+LPROC_SEQ_FOPS_RO(ofd_seqs);
 
-static int lprocfs_ofd_rd_tot_dirty(char *page, char **start, off_t off,
-				    int count, int *eof, void *data)
+static int ofd_tot_dirty_seq_show(struct seq_file *m, void *data)
 {
-	struct obd_device *obd = (struct obd_device *)data;
+	struct obd_device *obd = m->private;
 	struct ofd_device *ofd;
 
 	LASSERT(obd != NULL);
 	ofd = ofd_dev(obd->obd_lu_dev);
-	*eof = 1;
-	return snprintf(page, count, LPU64"\n", ofd->ofd_tot_dirty);
+	return seq_printf(m, LPU64"\n", ofd->ofd_tot_dirty);
 }
+LPROC_SEQ_FOPS_RO(ofd_tot_dirty);
 
-static int lprocfs_ofd_rd_tot_granted(char *page, char **start, off_t off,
-				      int count, int *eof, void *data)
+static int ofd_tot_granted_seq_show(struct seq_file *m, void *data)
 {
-	struct obd_device *obd = (struct obd_device *)data;
+	struct obd_device *obd = m->private;
 	struct ofd_device *ofd;
 
 	LASSERT(obd != NULL);
 	ofd = ofd_dev(obd->obd_lu_dev);
-	*eof = 1;
-	return snprintf(page, count, LPU64"\n", ofd->ofd_tot_granted);
+	return seq_printf(m, LPU64"\n", ofd->ofd_tot_granted);
 }
+LPROC_SEQ_FOPS_RO(ofd_tot_granted);
 
-static int lprocfs_ofd_rd_tot_pending(char *page, char **start, off_t off,
-				      int count, int *eof, void *data)
+static int ofd_tot_pending_seq_show(struct seq_file *m, void *data)
 {
-	struct obd_device *obd = (struct obd_device *)data;
+	struct obd_device *obd = m->private;
 	struct ofd_device *ofd;
 
 	LASSERT(obd != NULL);
 	ofd = ofd_dev(obd->obd_lu_dev);
-	*eof = 1;
-	return snprintf(page, count, LPU64"\n", ofd->ofd_tot_pending);
+	return seq_printf(m, LPU64"\n", ofd->ofd_tot_pending);
 }
+LPROC_SEQ_FOPS_RO(ofd_tot_pending);
 
-static int lprocfs_ofd_rd_grant_precreate(char *page, char **start, off_t off,
-					  int count, int *eof, void *data)
+static int ofd_grant_precreate_seq_show(struct seq_file *m, void *data)
 {
-	struct obd_device *obd = (struct obd_device *)data;
+	struct obd_device *obd = m->private;
 
 	LASSERT(obd != NULL);
-	*eof = 1;
-	return snprintf(page, count, "%ld\n",
+	return seq_printf(m, "%ld\n",
 			obd->obd_self_export->exp_filter_data.fed_grant);
 }
+LPROC_SEQ_FOPS_RO(ofd_grant_precreate);
 
-static int lprocfs_ofd_rd_grant_ratio(char *page, char **start, off_t off,
-				      int count, int *eof, void *data)
+static int ofd_grant_ratio_seq_show(struct seq_file *m, void *data)
 {
-	struct obd_device *obd = (struct obd_device *)data;
+	struct obd_device *obd = m->private;
 	struct ofd_device *ofd;
 
 	LASSERT(obd != NULL);
 	ofd = ofd_dev(obd->obd_lu_dev);
-	*eof = 1;
-	return snprintf(page, count, "%d%%\n",
+	return seq_printf(m, "%d%%\n",
 			(int) ofd_grant_reserved(ofd, 100));
 }
 
-static int lprocfs_ofd_wr_grant_ratio(struct file *file, const char *buffer,
-				      unsigned long count, void *data)
+static ssize_t
+ofd_grant_ratio_seq_write(struct file *file, const char *buffer,
+			  size_t count, loff_t *off)
 {
-	struct obd_device	*obd = (struct obd_device *)data;
+	struct obd_device	*obd = ((struct seq_file *)file->private_data)->private;
 	struct ofd_device	*ofd = ofd_dev(obd->obd_lu_dev);
 	int			 val;
 	int			 rc;
@@ -143,23 +137,23 @@ static int lprocfs_ofd_wr_grant_ratio(struct file *file, const char *buffer,
 	spin_unlock(&ofd->ofd_grant_lock);
 	return count;
 }
+LPROC_SEQ_FOPS(ofd_grant_ratio);
 
-static int lprocfs_ofd_rd_precreate_batch(char *page, char **start, off_t off,
-					  int count, int *eof, void *data)
+static int ofd_precreate_batch_seq_show(struct seq_file *m, void *data)
 {
-	struct obd_device *obd = (struct obd_device *)data;
+	struct obd_device *obd = m->private;
 	struct ofd_device *ofd;
 
 	LASSERT(obd != NULL);
 	ofd = ofd_dev(obd->obd_lu_dev);
-	*eof = 1;
-	return snprintf(page, count, "%d\n", ofd->ofd_precreate_batch);
+	return seq_printf(m, "%d\n", ofd->ofd_precreate_batch);
 }
 
-static int lprocfs_ofd_wr_precreate_batch(struct file *file, const char *buffer,
-					  unsigned long count, void *data)
+static ssize_t
+ofd_precreate_batch_seq_write(struct file *file, const char *buffer,
+				size_t count, loff_t *off)
 {
-	struct obd_device *obd = (struct obd_device *)data;
+	struct obd_device *obd = ((struct seq_file *)file->private_data)->private;
 	struct ofd_device *ofd = ofd_dev(obd->obd_lu_dev);
 	int val;
 	int rc;
@@ -176,11 +170,11 @@ static int lprocfs_ofd_wr_precreate_batch(struct file *file, const char *buffer,
 	spin_unlock(&ofd->ofd_batch_lock);
 	return count;
 }
+LPROC_SEQ_FOPS(ofd_precreate_batch);
 
-static int lprocfs_ofd_rd_last_id(char *page, char **start, off_t off,
-				  int count, int *eof, void *data)
+static int ofd_last_id_seq_show(struct seq_file *m, void *data)
 {
-	struct obd_device	*obd = data;
+	struct obd_device	*obd = m->private;
 	struct ofd_device	*ofd;
 	struct ofd_seq		*oseq = NULL;
 	int			retval = 0, rc;
@@ -198,35 +192,31 @@ static int lprocfs_ofd_rd_last_id(char *page, char **start, off_t off,
 		      fid_idif_seq(ostid_id(&oseq->os_oi),
 				   ofd->ofd_lut.lut_lsd.lsd_osd_index) :
 		      ostid_seq(&oseq->os_oi);
-		rc = snprintf(page, count, DOSTID"\n", seq,
-			      ostid_id(&oseq->os_oi));
+		rc = seq_printf(m, DOSTID"\n", seq, ostid_id(&oseq->os_oi));
 		if (rc < 0) {
 			retval = rc;
 			break;
 		}
-		page += rc;
-		count -= rc;
 		retval += rc;
 	}
 	read_unlock(&ofd->ofd_seq_list_lock);
 	return retval;
 }
+LPROC_SEQ_FOPS_RO(ofd_last_id);
 
-int lprocfs_ofd_rd_fmd_max_num(char *page, char **start, off_t off,
-			       int count, int *eof, void *data)
+int ofd_fmd_max_num_seq_show(struct seq_file *m, void *data)
 {
-	struct obd_device	*obd = data;
+	struct obd_device	*obd = m->private;
 	struct ofd_device	*ofd = ofd_dev(obd->obd_lu_dev);
-	int			 rc;
 
-	rc = snprintf(page, count, "%u\n", ofd->ofd_fmd_max_num);
-	return rc;
+	return seq_printf(m, "%u\n", ofd->ofd_fmd_max_num);
 }
 
-int lprocfs_ofd_wr_fmd_max_num(struct file *file, const char *buffer,
-			       unsigned long count, void *data)
+ssize_t
+ofd_fmd_max_num_seq_write(struct file *file, const char *buffer,
+			size_t count, loff_t *off)
 {
-	struct obd_device	*obd = data;
+	struct obd_device	*obd = ((struct seq_file *)file->private_data)->private;
 	struct ofd_device	*ofd = ofd_dev(obd->obd_lu_dev);
 	int			 val;
 	int			 rc;
@@ -241,22 +231,21 @@ int lprocfs_ofd_wr_fmd_max_num(struct file *file, const char *buffer,
 	ofd->ofd_fmd_max_num = val;
 	return count;
 }
+LPROC_SEQ_FOPS(ofd_fmd_max_num);
 
-int lprocfs_ofd_rd_fmd_max_age(char *page, char **start, off_t off,
-			       int count, int *eof, void *data)
+int ofd_fmd_max_age_seq_show(struct seq_file *m, void *data)
 {
-	struct obd_device	*obd = data;
+	struct obd_device	*obd = m->private;
 	struct ofd_device	*ofd = ofd_dev(obd->obd_lu_dev);
-	int			 rc;
 
-	rc = snprintf(page, count, "%ld\n", ofd->ofd_fmd_max_age / HZ);
-	return rc;
+	return seq_printf(m, "%ld\n", ofd->ofd_fmd_max_age / HZ);
 }
 
-int lprocfs_ofd_wr_fmd_max_age(struct file *file, const char *buffer,
-			       unsigned long count, void *data)
+ssize_t
+ofd_fmd_max_age_seq_write(struct file *file, const char *buffer,
+			  size_t count, loff_t *off)
 {
-	struct obd_device	*obd = data;
+	struct obd_device	*obd = ((struct seq_file *)file->private_data)->private;
 	struct ofd_device	*ofd = ofd_dev(obd->obd_lu_dev);
 	int			 val;
 	int			 rc;
@@ -271,22 +260,21 @@ int lprocfs_ofd_wr_fmd_max_age(struct file *file, const char *buffer,
 	ofd->ofd_fmd_max_age = val * HZ;
 	return count;
 }
+LPROC_SEQ_FOPS(ofd_fmd_max_age);
 
-static int lprocfs_ofd_rd_capa(char *page, char **start, off_t off,
-			       int count, int *eof, void *data)
+static int ofd_capa_seq_show(struct seq_file *m, void *data)
 {
-	struct obd_device	*obd = data;
-	int			 rc;
+	struct obd_device	*obd = m->private;
 
-	rc = snprintf(page, count, "capability on: %s\n",
-		      obd->u.filter.fo_fl_oss_capa ? "oss" : "");
-	return rc;
+	return seq_printf(m, "capability on: %s\n",
+			  obd->u.filter.fo_fl_oss_capa ? "oss" : "");
 }
 
-static int lprocfs_ofd_wr_capa(struct file *file, const char *buffer,
-			       unsigned long count, void *data)
+static ssize_t
+ofd_capa_seq_write(struct file *file, const char *buffer, size_t count,
+		   loff_t *off)
 {
-	struct obd_device	*obd = data;
+	struct obd_device	*obd = ((struct seq_file *)file->private_data)->private;
 	int			 val, rc;
 
 	rc = lprocfs_write_helper(buffer, count, &val);
@@ -305,28 +293,29 @@ static int lprocfs_ofd_wr_capa(struct file *file, const char *buffer,
 		      val ? "enabled" : "disabled");
 	return count;
 }
+LPROC_SEQ_FOPS(ofd_capa);
 
-static int lprocfs_ofd_rd_capa_count(char *page, char **start, off_t off,
-				     int count, int *eof, void *data)
+static int ofd_capa_count_seq_show(struct seq_file *m, void *data)
 {
-	return snprintf(page, count, "%d %d\n",
+	return seq_printf(m, "%d %d\n",
 			capa_count[CAPA_SITE_CLIENT],
 			capa_count[CAPA_SITE_SERVER]);
 }
+LPROC_SEQ_FOPS_RO(ofd_capa_count);
 
-int lprocfs_ofd_rd_degraded(char *page, char **start, off_t off,
-			    int count, int *eof, void *data)
+int ofd_degraded_seq_show(struct seq_file *m, void *data)
 {
-	struct obd_device *obd = data;
+	struct obd_device *obd = m->private;
 	struct ofd_device *ofd = ofd_dev(obd->obd_lu_dev);
 
-	return snprintf(page, count, "%u\n", ofd->ofd_raid_degraded);
+	return seq_printf(m, "%u\n", ofd->ofd_raid_degraded);
 }
 
-int lprocfs_ofd_wr_degraded(struct file *file, const char *buffer,
-			    unsigned long count, void *data)
+ssize_t
+ofd_degraded_seq_write(struct file *file, const char *buffer,
+			size_t count, loff_t *off)
 {
-	struct obd_device	*obd = data;
+	struct obd_device	*obd = ((struct seq_file *)file->private_data)->private;
 	struct ofd_device	*ofd = ofd_dev(obd->obd_lu_dev);
 	int			 val, rc;
 
@@ -337,38 +326,35 @@ int lprocfs_ofd_wr_degraded(struct file *file, const char *buffer,
 	spin_lock(&ofd->ofd_flags_lock);
 	ofd->ofd_raid_degraded = !!val;
 	spin_unlock(&ofd->ofd_flags_lock);
-
 	return count;
 }
+LPROC_SEQ_FOPS(ofd_degraded);
 
-int lprocfs_ofd_rd_fstype(char *page, char **start, off_t off, int count,
-			  int *eof, void *data)
+int ofd_fstype_seq_show(struct seq_file *m, void *data)
 {
-	struct obd_device *obd = data;
+	struct obd_device *obd = m->private;
 	struct ofd_device *ofd = ofd_dev(obd->obd_lu_dev);
 	struct lu_device  *d;
 
 	LASSERT(ofd->ofd_osd);
 	d = &ofd->ofd_osd->dd_lu_dev;
 	LASSERT(d->ld_type);
-	return snprintf(page, count, "%s\n", d->ld_type->ldt_name);
+	return seq_printf(m, "%s\n", d->ld_type->ldt_name);
 }
+LPROC_SEQ_FOPS_RO(ofd_fstype);
 
-int lprocfs_ofd_rd_syncjournal(char *page, char **start, off_t off,
-			       int count, int *eof, void *data)
+int ofd_syncjournal_seq_show(struct seq_file *m, void *data)
 {
-	struct obd_device	*obd = data;
+	struct obd_device	*obd = m->private;
 	struct ofd_device	*ofd = ofd_dev(obd->obd_lu_dev);
-	int			 rc;
 
-	rc = snprintf(page, count, "%u\n", ofd->ofd_syncjournal);
-	return rc;
+	return seq_printf(m, "%u\n", ofd->ofd_syncjournal);
 }
 
-int lprocfs_ofd_wr_syncjournal(struct file *file, const char *buffer,
-			       unsigned long count, void *data)
+ssize_t ofd_syncjournal_seq_write(struct file *file, const char *buffer,
+				  size_t count, loff_t *off)
 {
-	struct obd_device	*obd = data;
+	struct obd_device	*obd = ((struct seq_file *)file->private_data)->private;
 	struct ofd_device	*ofd = ofd_dev(obd->obd_lu_dev);
 	int			 val;
 	int			 rc;
@@ -387,27 +373,26 @@ int lprocfs_ofd_wr_syncjournal(struct file *file, const char *buffer,
 
 	return count;
 }
+LPROC_SEQ_FOPS(ofd_syncjournal);
 
 static char *sync_on_cancel_states[] = {"never",
 					"blocking",
 					"always" };
 
-int lprocfs_ofd_rd_sync_lock_cancel(char *page, char **start, off_t off,
-				    int count, int *eof, void *data)
+int ofd_sync_lock_cancel_seq_show(struct seq_file *m, void *data)
 {
-	struct obd_device	*obd = data;
+	struct obd_device	*obd = m->private;
 	struct lu_target	*tgt = obd->u.obt.obt_lut;
-	int			 rc;
 
-	rc = snprintf(page, count, "%s\n",
-		      sync_on_cancel_states[tgt->lut_sync_lock_cancel]);
-	return rc;
+	return seq_printf(m, "%s\n",
+			sync_on_cancel_states[tgt->lut_sync_lock_cancel]);
 }
 
-int lprocfs_ofd_wr_sync_lock_cancel(struct file *file, const char *buffer,
-				    unsigned long count, void *data)
+ssize_t
+ofd_sync_lock_cancel_seq_write(struct file *file, const char *buffer,
+				size_t count, loff_t *off)
 {
-	struct obd_device	*obd = data;
+	struct obd_device	*obd = ((struct seq_file *)file->private_data)->private;
 	struct lu_target	*tgt = obd->u.obt.obt_lut;
 	int			 val = -1;
 	int			 i;
@@ -435,22 +420,21 @@ int lprocfs_ofd_wr_sync_lock_cancel(struct file *file, const char *buffer,
 	spin_unlock(&tgt->lut_flags_lock);
 	return count;
 }
+LPROC_SEQ_FOPS(ofd_sync_lock_cancel);
 
-int lprocfs_ofd_rd_grant_compat_disable(char *page, char **start, off_t off,
-					int count, int *eof, void *data)
+int ofd_grant_compat_disable_seq_show(struct seq_file *m, void *data)
 {
-	struct obd_device	*obd = data;
+	struct obd_device	*obd = m->private;
 	struct ofd_device	*ofd = ofd_dev(obd->obd_lu_dev);
-	int			 rc;
 
-	rc = snprintf(page, count, "%u\n", ofd->ofd_grant_compat_disable);
-	return rc;
+	return seq_printf(m, "%u\n", ofd->ofd_grant_compat_disable);
 }
 
-int lprocfs_ofd_wr_grant_compat_disable(struct file *file, const char *buffer,
-					unsigned long count, void *data)
+ssize_t
+ofd_grant_compat_disable_seq_write(struct file *file, const char *buffer,
+					size_t count, loff_t *off)
 {
-	struct obd_device	*obd = data;
+	struct obd_device	*obd = ((struct seq_file *)file->private_data)->private;
 	struct ofd_device	*ofd = ofd_dev(obd->obd_lu_dev);
 	int			 val;
 	int			 rc;
@@ -469,86 +453,64 @@ int lprocfs_ofd_wr_grant_compat_disable(struct file *file, const char *buffer,
 	return count;
 }
 
-int lprocfs_ofd_rd_soft_sync_limit(char *page, char **start, off_t off,
-				   int count, int *eof, void *data)
-{
-	struct obd_device	*obd = data;
-	struct ofd_device	*ofd = ofd_dev(obd->obd_lu_dev);
-
-	return lprocfs_rd_uint(page, start, off, count, eof,
-			       &ofd->ofd_soft_sync_limit);
-}
-
-int lprocfs_ofd_wr_soft_sync_limit(struct file *file, const char *buffer,
-				   unsigned long count, void *data)
-{
-	struct obd_device	*obd = data;
-	struct ofd_device	*ofd = ofd_dev(obd->obd_lu_dev);
-
-	return lprocfs_wr_uint(file, buffer, count, &ofd->ofd_soft_sync_limit);
-}
-
-static struct lprocfs_vars lprocfs_ofd_obd_vars[] = {
-	{ "uuid",		 lprocfs_rd_uuid, 0, 0 },
-	{ "blocksize",		 lprocfs_rd_blksize, 0, 0 },
-	{ "kbytestotal",	 lprocfs_rd_kbytestotal, 0, 0 },
-	{ "kbytesfree",		 lprocfs_rd_kbytesfree, 0, 0 },
-	{ "kbytesavail",	 lprocfs_rd_kbytesavail, 0, 0 },
-	{ "filestotal",		 lprocfs_rd_filestotal, 0, 0 },
-	{ "filesfree",		 lprocfs_rd_filesfree, 0, 0 },
-	{ "seqs_allocated",	 lprocfs_ofd_rd_seqs, 0, 0 },
-	{ "fstype",		 lprocfs_ofd_rd_fstype, 0, 0 },
-	{ "last_id",		 lprocfs_ofd_rd_last_id, 0, 0 },
-	{ "tot_dirty",		 lprocfs_ofd_rd_tot_dirty,   0, 0 },
-	{ "tot_pending",	 lprocfs_ofd_rd_tot_pending, 0, 0 },
-	{ "tot_granted",	 lprocfs_ofd_rd_tot_granted, 0, 0 },
-	{ "grant_precreate",	 lprocfs_ofd_rd_grant_precreate, 0, 0 },
-	{ "grant_ratio",	 lprocfs_ofd_rd_grant_ratio,
-				 lprocfs_ofd_wr_grant_ratio, 0, 0 },
-	{ "precreate_batch",	 lprocfs_ofd_rd_precreate_batch,
-				 lprocfs_ofd_wr_precreate_batch, 0 },
-	{ "recovery_status",	 lprocfs_obd_rd_recovery_status, 0, 0 },
-	{ "recovery_time_soft",	 lprocfs_obd_rd_recovery_time_soft,
-				 lprocfs_obd_wr_recovery_time_soft, 0},
-	{ "recovery_time_hard",  lprocfs_obd_rd_recovery_time_hard,
-				 lprocfs_obd_wr_recovery_time_hard, 0},
-	{ "evict_client",	 0, lprocfs_wr_evict_client, 0,
-				 &lprocfs_evict_client_fops},
-	{ "num_exports",	 lprocfs_rd_num_exports,   0, 0 },
-	{ "degraded",		 lprocfs_ofd_rd_degraded,
-				 lprocfs_ofd_wr_degraded, 0},
-	{ "sync_journal",	 lprocfs_ofd_rd_syncjournal,
-				 lprocfs_ofd_wr_syncjournal, 0 },
-	{ "sync_on_lock_cancel", lprocfs_ofd_rd_sync_lock_cancel,
-				 lprocfs_ofd_wr_sync_lock_cancel, 0 },
-	{ "instance",		 lprocfs_target_rd_instance, 0 },
-	{ "ir_factor",		 lprocfs_obd_rd_ir_factor,
-				 lprocfs_obd_wr_ir_factor, 0},
-	{ "grant_compat_disable", lprocfs_ofd_rd_grant_compat_disable,
-				  lprocfs_ofd_wr_grant_compat_disable, 0 },
-	{ "client_cache_count",	 lprocfs_ofd_rd_fmd_max_num,
-				 lprocfs_ofd_wr_fmd_max_num, 0 },
-	{ "client_cache_seconds", lprocfs_ofd_rd_fmd_max_age,
-				  lprocfs_ofd_wr_fmd_max_age, 0 },
-	{ "capa",		 lprocfs_ofd_rd_capa,
-				 lprocfs_ofd_wr_capa, 0 },
-	{ "capa_count",		 lprocfs_ofd_rd_capa_count, 0, 0 },
-	{ "job_cleanup_interval", lprocfs_rd_job_interval,
-				  lprocfs_wr_job_interval, 0},
-	{ "soft_sync_limit",	 lprocfs_ofd_rd_soft_sync_limit,
-				 lprocfs_ofd_wr_soft_sync_limit, 0},
-	{ 0 }
-};
-
-static struct lprocfs_vars lprocfs_ofd_module_vars[] = {
-	{ "num_refs",	  lprocfs_rd_numrefs,	0, 0 },
+LPROC_SEQ_FOPS(ofd_grant_compat_disable);
+
+LPROC_SEQ_FOPS_RO_TYPE(ofd, uuid);
+LPROC_SEQ_FOPS_RO_TYPE(ofd, blksize);
+LPROC_SEQ_FOPS_RO_TYPE(ofd, kbytestotal);
+LPROC_SEQ_FOPS_RO_TYPE(ofd, kbytesfree);
+LPROC_SEQ_FOPS_RO_TYPE(ofd, kbytesavail);
+LPROC_SEQ_FOPS_RO_TYPE(ofd, filestotal);
+LPROC_SEQ_FOPS_RO_TYPE(ofd, filesfree);
+
+LPROC_SEQ_FOPS_RO_TYPE(ofd, recovery_status);
+LPROC_SEQ_FOPS_RW_TYPE(ofd, recovery_time_soft);
+LPROC_SEQ_FOPS_RW_TYPE(ofd, recovery_time_hard);
+LPROC_SEQ_FOPS_WO_TYPE(ofd, evict_client);
+LPROC_SEQ_FOPS_RO_TYPE(ofd, num_exports);
+LPROC_SEQ_FOPS_RO_TYPE(ofd, target_instance);
+LPROC_SEQ_FOPS_RW_TYPE(ofd, ir_factor);
+LPROC_SEQ_FOPS_RW_TYPE(ofd, job_interval);
+
+static struct lprocfs_seq_vars lprocfs_ofd_obd_vars[] = {
+	{ "uuid",			&ofd_uuid_fops			},
+	{ "blocksize",			&ofd_blksize_fops		},
+	{ "kbytestotal",		&ofd_kbytestotal_fops		},
+	{ "kbytesfree",			&ofd_kbytesfree_fops		},
+	{ "kbytesavail",		&ofd_kbytesavail_fops		},
+	{ "filestotal",			&ofd_filestotal_fops		},
+	{ "filesfree",			&ofd_filesfree_fops		},
+	{ "seqs_allocated",		&ofd_seqs_fops			},
+	{ "fstype",			&ofd_fstype_fops		},
+	{ "last_id",			&ofd_last_id_fops		},
+	{ "tot_dirty",			&ofd_tot_dirty_fops		},
+	{ "tot_pending",		&ofd_tot_pending_fops		},
+	{ "tot_granted",		&ofd_tot_granted_fops		},
+	{ "grant_precreate",		&ofd_grant_precreate_fops	},
+	{ "grant_ratio",		&ofd_grant_ratio_fops		},
+	{ "precreate_batch",		&ofd_precreate_batch_fops	},
+	{ "recovery_status",		&ofd_recovery_status_fops	},
+	{ "recovery_time_soft",		&ofd_recovery_time_soft_fops	},
+	{ "recovery_time_hard",		&ofd_recovery_time_hard_fops	},
+	{ "evict_client",		&ofd_evict_client_fops		},
+	{ "num_exports",		&ofd_num_exports_fops		},
+	{ "degraded",			&ofd_degraded_fops		},
+	{ "sync_journal",		&ofd_syncjournal_fops		},
+	{ "sync_on_lock_cancel",	&ofd_sync_lock_cancel_fops	},
+	{ "instance",			&ofd_target_instance_fops	},
+	{ "ir_factor",			&ofd_ir_factor_fops		},
+	{ "grant_compat_disable",	&ofd_grant_compat_disable_fops	},
+	{ "client_cache_count",		&ofd_fmd_max_num_fops		},
+	{ "client_cache_seconds",	&ofd_fmd_max_age_fops		},
+	{ "capa",			&ofd_capa_fops			},
+	{ "capa_count",			&ofd_capa_count_fops		},
+	{ "job_cleanup_interval",	&ofd_job_interval_fops		},
 	{ 0 }
 };
 
-void lprocfs_ofd_init_vars(struct lprocfs_static_vars *lvars)
+void lprocfs_ofd_init_vars(struct obd_device *obd)
 {
-	lvars->module_vars  = lprocfs_ofd_module_vars;
-	lvars->obd_vars     = lprocfs_ofd_obd_vars;
+	obd->obd_vars = lprocfs_ofd_obd_vars;
 }
 
 void ofd_stats_counter_init(struct lprocfs_stats *stats)
diff --git a/lustre/ofd/ofd_dev.c b/lustre/ofd/ofd_dev.c
index 2bdbde6..e3b8358 100644
--- a/lustre/ofd/ofd_dev.c
+++ b/lustre/ofd/ofd_dev.c
@@ -206,8 +206,7 @@ static int ofd_process_config(const struct lu_env *env, struct lu_device *d,
 
 	switch (cfg->lcfg_command) {
 	case LCFG_PARAM: {
-		struct lprocfs_static_vars lvars;
-
+		struct obd_device	*obd = ofd_obd(m);
 		/* For interoperability */
 		struct cfg_interop_param   *ptr = NULL;
 		struct lustre_cfg	   *old_cfg = NULL;
@@ -240,8 +239,7 @@ static int ofd_process_config(const struct lu_env *env, struct lu_device *d,
 			}
 		}
 
-		lprocfs_ofd_init_vars(&lvars);
-		rc = class_process_proc_param(PARAM_OST, lvars.obd_vars, cfg,
+		rc = class_process_proc_seq_param(PARAM_OST, obd->obd_vars, cfg,
 					      d->ld_obd);
 		if (rc > 0 || rc == -ENOSYS)
 			/* we don't understand; pass it on */
@@ -422,9 +420,10 @@ static struct lu_device_operations ofd_lu_ops = {
 	.ldo_prepare		= ofd_prepare,
 };
 
+LPROC_SEQ_FOPS(lprocfs_nid_stats_clear);
+
 static int ofd_procfs_init(struct ofd_device *ofd)
 {
-	struct lprocfs_static_vars	 lvars;
 	struct obd_device		*obd = ofd_obd(ofd);
 	cfs_proc_dir_entry_t		*entry;
 	int				 rc = 0;
@@ -433,8 +432,8 @@ static int ofd_procfs_init(struct ofd_device *ofd)
 
 	/* lprocfs must be setup before the ofd so state can be safely added
 	 * to /proc incrementally as the ofd is setup */
-	lprocfs_ofd_init_vars(&lvars);
-	rc = lprocfs_obd_setup(obd, lvars.obd_vars);
+	lprocfs_ofd_init_vars(obd);
+	rc = lprocfs_seq_obd_setup(obd);
 	if (rc) {
 		CERROR("%s: lprocfs_obd_setup failed: %d.\n",
 		       obd->obd_name, rc);
@@ -450,7 +449,7 @@ static int ofd_procfs_init(struct ofd_device *ofd)
 
 	obd->obd_uses_nid_stats = 1;
 
-	entry = lprocfs_register("exports", obd->obd_proc_entry, NULL, NULL);
+	entry = lprocfs_seq_register("exports", obd->obd_proc_entry, NULL, NULL);
 	if (IS_ERR(entry)) {
 		rc = PTR_ERR(entry);
 		CERROR("%s: error %d setting up lprocfs for %s\n",
@@ -460,8 +459,10 @@ static int ofd_procfs_init(struct ofd_device *ofd)
 	obd->obd_proc_exports_entry = entry;
 
 	entry = lprocfs_add_simple(obd->obd_proc_exports_entry, "clear",
-				   lprocfs_nid_stats_clear_read,
-				   lprocfs_nid_stats_clear_write, obd, NULL);
+#ifndef HAVE_ONLY_PROCFS_SEQ
+				   NULL, NULL,
+#endif
+				   obd, &lprocfs_nid_stats_clear_fops);
 	if (IS_ERR(entry)) {
 		rc = PTR_ERR(entry);
 		CERROR("%s: add proc entry 'clear' failed: %d.\n",
@@ -477,7 +478,7 @@ static int ofd_procfs_init(struct ofd_device *ofd)
 		GOTO(remove_entry_clear, rc);
 	RETURN(0);
 remove_entry_clear:
-	lprocfs_remove_proc_entry("clear", obd->obd_proc_exports_entry);
+	lprocfs_remove(&obd->obd_proc_exports_entry);
 obd_cleanup:
 	lprocfs_obd_cleanup(obd);
 	lprocfs_free_obd_stats(obd);
@@ -487,7 +488,7 @@ obd_cleanup:
 
 static void ofd_procfs_add_brw_stats_symlink(struct ofd_device *ofd)
 {
-	struct obd_device	*obd = ofd_obd(ofd);
+	/*struct obd_device	*obd = ofd_obd(ofd);
 	struct obd_device	*osd_obd = ofd->ofd_osd_exp->exp_obd;
 	cfs_proc_dir_entry_t	*osd_root = osd_obd->obd_type->typ_procroot;
 	cfs_proc_dir_entry_t	*osd_dir;
@@ -516,20 +517,15 @@ static void ofd_procfs_add_brw_stats_symlink(struct ofd_device *ofd)
 		lprocfs_add_symlink("writethrough_cache_enable",
 				    obd->obd_proc_entry,
 				    "../../%s/%s/writethrough_cache_enable",
-				    osd_root->name, osd_dir->name);
+				    osd_root->name, osd_dir->name);*/
 }
 
 static void ofd_procfs_fini(struct ofd_device *ofd)
 {
 	struct obd_device *obd = ofd_obd(ofd);
 
-	lprocfs_remove_proc_entry("writethrough_cache_enable",
-				  obd->obd_proc_entry);
-	lprocfs_remove_proc_entry("readcache_max_filesize",
-				  obd->obd_proc_entry);
-	lprocfs_remove_proc_entry("read_cache_enable", obd->obd_proc_entry);
-	lprocfs_remove_proc_entry("brw_stats", obd->obd_proc_entry);
-	lprocfs_remove_proc_entry("clear", obd->obd_proc_exports_entry);
+	lprocfs_remove(&obd->obd_proc_exports_entry);
+	lprocfs_remove(&obd->obd_proc_entry);
 	lprocfs_free_per_client_stats(obd);
 	lprocfs_obd_cleanup(obd);
 	lprocfs_free_obd_stats(obd);
@@ -1889,7 +1885,6 @@ static struct lu_device_type ofd_device_type = {
 
 int __init ofd_init(void)
 {
-	struct lprocfs_static_vars	lvars;
 	int				rc;
 
 	rc = lu_kmem_init(ofd_caches);
@@ -1902,11 +1897,9 @@ int __init ofd_init(void)
 		return(rc);
 	}
 
-	lprocfs_ofd_init_vars(&lvars);
-
 	rc = class_register_type(&ofd_obd_ops, NULL, NULL,
 #ifndef HAVE_ONLY_PROCFS_SEQ
-				lvars.module_vars,
+				NULL,
 #endif
 				LUSTRE_OST_NAME, &ofd_device_type);
 	return rc;
diff --git a/lustre/ofd/ofd_internal.h b/lustre/ofd/ofd_internal.h
index 9285a1f..6acae49 100644
--- a/lustre/ofd/ofd_internal.h
+++ b/lustre/ofd/ofd_internal.h
@@ -383,13 +383,10 @@ int ofd_txn_stop_cb(const struct lu_env *env, struct thandle *txn,
 
 /* lproc_ofd.c */
 #ifdef LPROCFS
-void lprocfs_ofd_init_vars(struct lprocfs_static_vars *lvars);
+void lprocfs_ofd_init_vars(struct obd_device *obd);
 void ofd_stats_counter_init(struct lprocfs_stats *stats);
 #else
-static void lprocfs_ofd_init_vars(struct lprocfs_static_vars *lvars)
-{
-	memset(lvars, 0, sizeof(*lvars));
-}
+static void lprocfs_ofd_init_vars(struct obd_device *obd) {}
 static inline void ofd_stats_counter_init(struct lprocfs_stats *stats) {}
 #endif
 
-- 
1.8.5.1

