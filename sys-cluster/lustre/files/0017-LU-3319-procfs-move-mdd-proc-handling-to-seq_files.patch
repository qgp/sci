From d32db1df1792f96fa9aa88ca949b403946a92eef Mon Sep 17 00:00:00 2001
From: James Simmons <uja.ornl@gmail.com>
Date: Mon, 2 Dec 2013 12:40:35 -0500
Subject: [PATCH 17/18] LU-3319 procfs: move mdd proc handling to seq_files

With 3.10 linux kernel and above proc handling now only
uses struct seq_files. This patch migrates the mdd
layer proc entries over to using seq_files.

Signed-off-by: James Simmons <uja.ornl@gmail.com>
Change-Id: I61b7df6bfd5efd0f12e3ca1a1813b7b62d493168
---
 lustre/include/lustre_lfsck.h  |   4 +-
 lustre/lfsck/lfsck_internal.h  |   9 +-
 lustre/lfsck/lfsck_lib.c       |  68 ++++-------
 lustre/lfsck/lfsck_namespace.c |  61 +++-------
 lustre/mdd/mdd_device.c        |  25 ++--
 lustre/mdd/mdd_internal.h      |   1 -
 lustre/mdd/mdd_lproc.c         | 259 +++++++++++++++++------------------------
 7 files changed, 162 insertions(+), 265 deletions(-)

diff --git a/lustre/include/lustre_lfsck.h b/lustre/include/lustre_lfsck.h
index f75d507..e491933 100644
--- a/lustre/include/lustre_lfsck.h
+++ b/lustre/include/lustre_lfsck.h
@@ -52,9 +52,9 @@ int lfsck_start(const struct lu_env *env, struct dt_device *key,
 int lfsck_stop(const struct lu_env *env, struct dt_device *key,
 	       bool pause);
 
-int lfsck_get_speed(struct dt_device *key, void *buf, int len);
+int lfsck_get_speed(struct seq_file *m, struct dt_device *key);
 int lfsck_set_speed(struct dt_device *key, int val);
 
-int lfsck_dump(struct dt_device *key, void *buf, int len, __u16 type);
+int lfsck_dump(struct seq_file *m, struct dt_device *key, __u16 type);
 
 #endif /* _LUSTRE_LFSCK_H */
diff --git a/lustre/lfsck/lfsck_internal.h b/lustre/lfsck/lfsck_internal.h
index 56cdff0..50eb341 100644
--- a/lustre/lfsck/lfsck_internal.h
+++ b/lustre/lfsck/lfsck_internal.h
@@ -229,8 +229,7 @@ struct lfsck_operations {
 
 	int (*lfsck_dump)(const struct lu_env *env,
 			  struct lfsck_component *com,
-			  char *buf,
-			  int len);
+			  struct seq_file *m);
 
 	int (*lfsck_double_scan)(const struct lu_env *env,
 				 struct lfsck_component *com);
@@ -361,10 +360,10 @@ struct lfsck_thread_info {
 /* lfsck_lib.c */
 void lfsck_component_cleanup(const struct lu_env *env,
 			     struct lfsck_component *com);
-int lfsck_bits_dump(char **buf, int *len, int bits, const char *names[],
+int lfsck_bits_dump(struct seq_file *m, int bits, const char *names[],
 		    const char *prefix);
-int lfsck_time_dump(char **buf, int *len, __u64 time, const char *prefix);
-int lfsck_pos_dump(char **buf, int *len, struct lfsck_position *pos,
+int lfsck_time_dump(struct seq_file *m, __u64 time, const char *prefix);
+int lfsck_pos_dump(struct seq_file *m, struct lfsck_position *pos,
 		   const char *prefix);
 void lfsck_pos_fill(const struct lu_env *env, struct lfsck_instance *lfsck,
 		    struct lfsck_position *pos, bool init);
diff --git a/lustre/lfsck/lfsck_lib.c b/lustre/lfsck/lfsck_lib.c
index 0da2614..da68358 100644
--- a/lustre/lfsck/lfsck_lib.c
+++ b/lustre/lfsck/lfsck_lib.c
@@ -258,75 +258,49 @@ static inline int lfsck_instance_add(struct lfsck_instance *lfsck)
 	return 0;
 }
 
-int lfsck_bits_dump(char **buf, int *len, int bits, const char *names[],
+int lfsck_bits_dump(struct seq_file *m, int bits, const char *names[],
 		    const char *prefix)
 {
-	int save = *len;
 	int flag;
-	int rc;
 	int i;
 
-	rc = snprintf(*buf, *len, "%s:%c", prefix, bits != 0 ? ' ' : '\n');
-	if (rc <= 0)
-		return -ENOSPC;
+	seq_printf(m, "%s:%c", prefix, bits != 0 ? ' ' : '\n');
 
-	*buf += rc;
-	*len -= rc;
 	for (i = 0, flag = 1; bits != 0; i++, flag = 1 << i) {
 		if (flag & bits) {
 			bits &= ~flag;
-			rc = snprintf(*buf, *len, "%s%c", names[i],
+			seq_printf(m, "%s%c", names[i],
 				      bits != 0 ? ',' : '\n');
-			if (rc <= 0)
-				return -ENOSPC;
-
-			*buf += rc;
-			*len -= rc;
 		}
 	}
-	return save - *len;
+	return 0;
 }
 
-int lfsck_time_dump(char **buf, int *len, __u64 time, const char *prefix)
+int lfsck_time_dump(struct seq_file *m, __u64 time, const char *prefix)
 {
-	int rc;
-
 	if (time != 0)
-		rc = snprintf(*buf, *len, "%s: "LPU64" seconds\n", prefix,
-			      cfs_time_current_sec() - time);
+		seq_printf(m, "%s: "LPU64" seconds\n", prefix,
+			   cfs_time_current_sec() - time);
 	else
-		rc = snprintf(*buf, *len, "%s: N/A\n", prefix);
-	if (rc <= 0)
-		return -ENOSPC;
-
-	*buf += rc;
-	*len -= rc;
-	return rc;
+		seq_printf(m, "%s: N/A\n", prefix);
+	return 0;
 }
 
-int lfsck_pos_dump(char **buf, int *len, struct lfsck_position *pos,
+int lfsck_pos_dump(struct seq_file *m, struct lfsck_position *pos,
 		   const char *prefix)
 {
-	int rc;
-
 	if (fid_is_zero(&pos->lp_dir_parent)) {
 		if (pos->lp_oit_cookie == 0)
-			rc = snprintf(*buf, *len, "%s: N/A, N/A, N/A\n",
-				      prefix);
+			seq_printf(m, "%s: N/A, N/A, N/A\n", prefix);
 		else
-			rc = snprintf(*buf, *len, "%s: "LPU64", N/A, N/A\n",
-				      prefix, pos->lp_oit_cookie);
+			seq_printf(m, "%s: "LPU64", N/A, N/A\n",
+				   prefix, pos->lp_oit_cookie);
 	} else {
-		rc = snprintf(*buf, *len, "%s: "LPU64", "DFID", "LPU64"\n",
-			      prefix, pos->lp_oit_cookie,
-			      PFID(&pos->lp_dir_parent), pos->lp_dir_cookie);
+		seq_printf(m, "%s: "LPU64", "DFID", "LPU64"\n",
+			   prefix, pos->lp_oit_cookie,
+			   PFID(&pos->lp_dir_parent), pos->lp_dir_cookie);
 	}
-	if (rc <= 0)
-		return -ENOSPC;
-
-	*buf += rc;
-	*len -= rc;
-	return rc;
+	return 0;
 }
 
 void lfsck_pos_fill(const struct lu_env *env, struct lfsck_instance *lfsck,
@@ -765,7 +739,7 @@ int lfsck_double_scan(const struct lu_env *env, struct lfsck_instance *lfsck)
 
 /* external interfaces */
 
-int lfsck_get_speed(struct dt_device *key, void *buf, int len)
+int lfsck_get_speed(struct seq_file *m, struct dt_device *key)
 {
 	struct lu_env		env;
 	struct lfsck_instance  *lfsck;
@@ -780,7 +754,7 @@ int lfsck_get_speed(struct dt_device *key, void *buf, int len)
 	if (rc != 0)
 		GOTO(out, rc);
 
-	rc = snprintf(buf, len, "%u\n", lfsck->li_bookmark_ram.lb_speed_limit);
+	seq_printf(m, "%u\n", lfsck->li_bookmark_ram.lb_speed_limit);
 	lu_env_fini(&env);
 
 	GOTO(out, rc);
@@ -820,7 +794,7 @@ out:
 }
 EXPORT_SYMBOL(lfsck_set_speed);
 
-int lfsck_dump(struct dt_device *key, void *buf, int len, __u16 type)
+int lfsck_dump(struct seq_file *m, struct dt_device *key, __u16 type)
 {
 	struct lu_env		env;
 	struct lfsck_instance  *lfsck;
@@ -840,7 +814,7 @@ int lfsck_dump(struct dt_device *key, void *buf, int len, __u16 type)
 	if (rc != 0)
 		GOTO(out, rc);
 
-	rc = com->lc_ops->lfsck_dump(&env, com, buf, len);
+	rc = com->lc_ops->lfsck_dump(&env, com, m);
 	lu_env_fini(&env);
 
 	GOTO(out, rc);
diff --git a/lustre/lfsck/lfsck_namespace.c b/lustre/lfsck/lfsck_namespace.c
index 3cc043d..225351f 100644
--- a/lustre/lfsck/lfsck_namespace.c
+++ b/lustre/lfsck/lfsck_namespace.c
@@ -1092,66 +1092,57 @@ static int lfsck_namespace_post(const struct lu_env *env,
 
 static int
 lfsck_namespace_dump(const struct lu_env *env, struct lfsck_component *com,
-		     char *buf, int len)
+		     struct seq_file *m)
 {
 	struct lfsck_instance	*lfsck = com->lc_lfsck;
 	struct lfsck_bookmark	*bk    = &lfsck->li_bookmark_ram;
 	struct lfsck_namespace	*ns    =
 				(struct lfsck_namespace *)com->lc_file_ram;
-	int			 save  = len;
-	int			 ret   = -ENOSPC;
 	int			 rc;
 
 	down_read(&com->lc_sem);
-	rc = snprintf(buf, len,
-		      "name: lfsck_namespace\n"
+	seq_printf(m, "name: lfsck_namespace\n"
 		      "magic: 0x%x\n"
 		      "version: %d\n"
 		      "status: %s\n",
 		      ns->ln_magic,
 		      bk->lb_version,
 		      lfsck_status_names[ns->ln_status]);
-	if (rc <= 0)
-		goto out;
 
-	buf += rc;
-	len -= rc;
-	rc = lfsck_bits_dump(&buf, &len, ns->ln_flags, lfsck_flags_names,
-			     "flags");
+	rc = lfsck_bits_dump(m, ns->ln_flags, lfsck_flags_names, "flags");
 	if (rc < 0)
 		goto out;
 
-	rc = lfsck_bits_dump(&buf, &len, bk->lb_param, lfsck_param_names,
-			     "param");
+	rc = lfsck_bits_dump(m, bk->lb_param, lfsck_param_names, "param");
 	if (rc < 0)
 		goto out;
 
-	rc = lfsck_time_dump(&buf, &len, ns->ln_time_last_complete,
+	rc = lfsck_time_dump(m, ns->ln_time_last_complete,
 			     "time_since_last_completed");
 	if (rc < 0)
 		goto out;
 
-	rc = lfsck_time_dump(&buf, &len, ns->ln_time_latest_start,
+	rc = lfsck_time_dump(m, ns->ln_time_latest_start,
 			     "time_since_latest_start");
 	if (rc < 0)
 		goto out;
 
-	rc = lfsck_time_dump(&buf, &len, ns->ln_time_last_checkpoint,
+	rc = lfsck_time_dump(m, ns->ln_time_last_checkpoint,
 			     "time_since_last_checkpoint");
 	if (rc < 0)
 		goto out;
 
-	rc = lfsck_pos_dump(&buf, &len, &ns->ln_pos_latest_start,
+	rc = lfsck_pos_dump(m, &ns->ln_pos_latest_start,
 			    "latest_start_position");
 	if (rc < 0)
 		goto out;
 
-	rc = lfsck_pos_dump(&buf, &len, &ns->ln_pos_last_checkpoint,
+	rc = lfsck_pos_dump(m, &ns->ln_pos_last_checkpoint,
 			    "last_checkpoint_position");
 	if (rc < 0)
 		goto out;
 
-	rc = lfsck_pos_dump(&buf, &len, &ns->ln_pos_first_inconsistent,
+	rc = lfsck_pos_dump(m, &ns->ln_pos_first_inconsistent,
 			    "first_failure_position");
 	if (rc < 0)
 		goto out;
@@ -1171,8 +1162,7 @@ lfsck_namespace_dump(const struct lu_env *env, struct lfsck_component *com,
 			do_div(new_checked, duration);
 		if (rtime != 0)
 			do_div(speed, rtime);
-		rc = snprintf(buf, len,
-			      "checked_phase1: "LPU64"\n"
+		seq_printf(m, "checked_phase1: "LPU64"\n"
 			      "checked_phase2: "LPU64"\n"
 			      "updated_phase1: "LPU64"\n"
 			      "updated_phase2: "LPU64"\n"
@@ -1204,11 +1194,6 @@ lfsck_namespace_dump(const struct lu_env *env, struct lfsck_component *com,
 			      ns->ln_run_time_phase2,
 			      speed,
 			      new_checked);
-		if (rc <= 0)
-			goto out;
-
-		buf += rc;
-		len -= rc;
 
 		LASSERT(lfsck->li_di_oit != NULL);
 
@@ -1237,9 +1222,7 @@ lfsck_namespace_dump(const struct lu_env *env, struct lfsck_component *com,
 			pos.lp_dir_cookie = 0;
 		}
 		spin_unlock(&lfsck->li_lock);
-		rc = lfsck_pos_dump(&buf, &len, &pos, "current_position");
-		if (rc <= 0)
-			goto out;
+		lfsck_pos_dump(m, &pos, "current_position");
 	} else if (ns->ln_status == LS_SCANNING_PHASE2) {
 		cfs_duration_t duration = cfs_time_current() -
 					  lfsck->li_time_last_checkpoint;
@@ -1257,8 +1240,7 @@ lfsck_namespace_dump(const struct lu_env *env, struct lfsck_component *com,
 			do_div(speed1, ns->ln_run_time_phase1);
 		if (rtime != 0)
 			do_div(speed2, rtime);
-		rc = snprintf(buf, len,
-			      "checked_phase1: "LPU64"\n"
+		seq_printf(m, "checked_phase1: "LPU64"\n"
 			      "checked_phase2: "LPU64"\n"
 			      "updated_phase1: "LPU64"\n"
 			      "updated_phase2: "LPU64"\n"
@@ -1293,11 +1275,6 @@ lfsck_namespace_dump(const struct lu_env *env, struct lfsck_component *com,
 			      speed2,
 			      new_checked,
 			      PFID(&ns->ln_fid_latest_scanned_phase2));
-		if (rc <= 0)
-			goto out;
-
-		buf += rc;
-		len -= rc;
 	} else {
 		__u64 speed1 = ns->ln_items_checked;
 		__u64 speed2 = ns->ln_objs_checked_phase2;
@@ -1306,8 +1283,7 @@ lfsck_namespace_dump(const struct lu_env *env, struct lfsck_component *com,
 			do_div(speed1, ns->ln_run_time_phase1);
 		if (ns->ln_run_time_phase2 != 0)
 			do_div(speed2, ns->ln_run_time_phase2);
-		rc = snprintf(buf, len,
-			      "checked_phase1: "LPU64"\n"
+		seq_printf(m, "checked_phase1: "LPU64"\n"
 			      "checked_phase2: "LPU64"\n"
 			      "updated_phase1: "LPU64"\n"
 			      "updated_phase2: "LPU64"\n"
@@ -1340,17 +1316,10 @@ lfsck_namespace_dump(const struct lu_env *env, struct lfsck_component *com,
 			      ns->ln_run_time_phase2,
 			      speed1,
 			      speed2);
-		if (rc <= 0)
-			goto out;
-
-		buf += rc;
-		len -= rc;
 	}
-	ret = save - len;
-
 out:
 	up_read(&com->lc_sem);
-	return ret;
+	return 0;
 }
 
 static int lfsck_namespace_double_scan(const struct lu_env *env,
diff --git a/lustre/mdd/mdd_device.c b/lustre/mdd/mdd_device.c
index 750281a..ee82f71 100644
--- a/lustre/mdd/mdd_device.c
+++ b/lustre/mdd/mdd_device.c
@@ -812,16 +812,16 @@ static int mdd_process_config(const struct lu_env *env,
         ENTRY;
 
         switch (cfg->lcfg_command) {
-        case LCFG_PARAM: {
-                struct lprocfs_static_vars lvars;
-
-                lprocfs_mdd_init_vars(&lvars);
-                rc = class_process_proc_param(PARAM_MDD, lvars.obd_vars, cfg,m);
-                if (rc > 0 || rc == -ENOSYS)
-                        /* we don't understand; pass it on */
-                        rc = next->ld_ops->ldo_process_config(env, next, cfg);
-                break;
-        }
+	case LCFG_PARAM: {
+		struct obd_device *obd = mdd2obd_dev(m);
+
+		rc = class_process_proc_seq_param(PARAM_MDD, obd->obd_vars,
+						  cfg, m);
+		if (rc > 0 || rc == -ENOSYS)
+			/* we don't understand; pass it on */
+			rc = next->ld_ops->ldo_process_config(env, next, cfg);
+		break;
+	}
         case LCFG_SETUP:
                 rc = next->ld_ops->ldo_process_config(env, next, cfg);
                 if (rc)
@@ -1492,11 +1492,8 @@ LU_CONTEXT_KEY_DEFINE(mdd, LCT_MD_THREAD);
 
 static int __init mdd_mod_init(void)
 {
-	struct lprocfs_static_vars lvars;
 	int rc;
 
-	lprocfs_mdd_init_vars(&lvars);
-
 	rc = lu_kmem_init(mdd_caches);
 	if (rc)
 		return rc;
@@ -1512,7 +1509,7 @@ static int __init mdd_mod_init(void)
 
 	rc = class_register_type(&mdd_obd_device_ops, NULL, NULL,
 #ifndef HAVE_ONLY_PROCFS_SEQ
-				lvars.module_vars,
+				NULL,
 #endif
 				LUSTRE_MDD_NAME, &mdd_device_type);
 	if (rc)
diff --git a/lustre/mdd/mdd_internal.h b/lustre/mdd/mdd_internal.h
index daa1dcb..5332b2c 100644
--- a/lustre/mdd/mdd_internal.h
+++ b/lustre/mdd/mdd_internal.h
@@ -340,7 +340,6 @@ int orph_declare_index_delete(const struct lu_env *, struct mdd_object *,
                               struct thandle *);
 
 /* mdd_lproc.c */
-void lprocfs_mdd_init_vars(struct lprocfs_static_vars *lvars);
 int mdd_procfs_init(struct mdd_device *mdd, const char *name);
 int mdd_procfs_fini(struct mdd_device *mdd);
 
diff --git a/lustre/mdd/mdd_lproc.c b/lustre/mdd/mdd_lproc.c
index bd23302..6ddacf7 100644
--- a/lustre/mdd/mdd_lproc.c
+++ b/lustre/mdd/mdd_lproc.c
@@ -49,56 +49,13 @@
 #include <libcfs/libcfs_string.h>
 #include "mdd_internal.h"
 
-int mdd_procfs_init(struct mdd_device *mdd, const char *name)
+static ssize_t
+mdd_atime_diff_seq_write(struct file *file, const char *buffer,
+			 size_t count, loff_t *off)
 {
-        struct lprocfs_static_vars lvars;
-        struct obd_type     *type;
-        int                  rc;
-        ENTRY;
-
-	/* at the moment there is no linkage between lu_type
-	 * and obd_type, so we lookup obd_type this way */
-	type = class_search_type(LUSTRE_MDD_NAME);
-
-        LASSERT(name != NULL);
-        LASSERT(type != NULL);
-
-        /* Find the type procroot and add the proc entry for this device */
-        lprocfs_mdd_init_vars(&lvars);
-        mdd->mdd_proc_entry = lprocfs_register(name, type->typ_procroot,
-                                               lvars.obd_vars, mdd);
-        if (IS_ERR(mdd->mdd_proc_entry)) {
-                rc = PTR_ERR(mdd->mdd_proc_entry);
-                CERROR("Error %d setting up lprocfs for %s\n",
-                       rc, name);
-                mdd->mdd_proc_entry = NULL;
-                GOTO(out, rc);
-        }
-
-	rc = 0;
-
-        EXIT;
-out:
-        if (rc)
-               mdd_procfs_fini(mdd);
-        return rc;
-}
-
-int mdd_procfs_fini(struct mdd_device *mdd)
-{
-        if (mdd->mdd_proc_entry) {
-                 lprocfs_remove(&mdd->mdd_proc_entry);
-                 mdd->mdd_proc_entry = NULL;
-        }
-        RETURN(0);
-}
-
-static int lprocfs_wr_atime_diff(struct file *file, const char *buffer,
-                                 unsigned long count, void *data)
-{
-        struct mdd_device *mdd = data;
-        char kernbuf[20], *end;
-        unsigned long diff = 0;
+	struct mdd_device *mdd = ((struct seq_file *)file->private_data)->private;
+	char kernbuf[20], *end;
+	unsigned long diff = 0;
 
         if (count > (sizeof(kernbuf) - 1))
                 return -EINVAL;
@@ -116,37 +73,34 @@ static int lprocfs_wr_atime_diff(struct file *file, const char *buffer,
         return count;
 }
 
-static int lprocfs_rd_atime_diff(char *page, char **start, off_t off,
-                                 int count, int *eof, void *data)
+static int mdd_atime_diff_seq_show(struct seq_file *m, void *data)
 {
-        struct mdd_device *mdd = data;
+	struct mdd_device *mdd = m->private;
 
-        *eof = 1;
-        return snprintf(page, count, "%lu\n", mdd->mdd_atime_diff);
+	return seq_printf(m, "%lu\n", mdd->mdd_atime_diff);
 }
-
+LPROC_SEQ_FOPS(mdd_atime_diff);
 
 /**** changelogs ****/
-static int lprocfs_rd_changelog_mask(char *page, char **start, off_t off,
-                                     int count, int *eof, void *data)
+static int mdd_changelog_mask_seq_show(struct seq_file *m, void *data)
 {
-        struct mdd_device *mdd = data;
-        int i = 0, rc = 0;
-
-        *eof = 1;
-        while (i < CL_LAST) {
-                if (mdd->mdd_cl.mc_mask & (1 << i))
-                        rc += snprintf(page + rc, count - rc, "%s ",
-                                       changelog_type2str(i));
-                i++;
-        }
-        return rc;
+	struct mdd_device *mdd = m->private;
+	int i = 0;
+
+	while (i < CL_LAST) {
+		if (mdd->mdd_cl.mc_mask & (1 << i))
+			seq_printf(m, "%s ", changelog_type2str(i));
+		i++;
+	}
+	seq_printf(m, "\n");
+	return 0;
 }
 
-static int lprocfs_wr_changelog_mask(struct file *file, const char *buffer,
-				     unsigned long count, void *data)
+static ssize_t
+mdd_changelog_mask_seq_write(struct file *file, const char *buffer,
+			     size_t count, loff_t *off)
 {
-	struct mdd_device *mdd = data;
+	struct mdd_device *mdd = ((struct seq_file *)file->private_data)->private;
 	char *kernbuf;
 	int rc;
 	ENTRY;
@@ -168,45 +122,32 @@ out:
 	OBD_FREE(kernbuf, PAGE_CACHE_SIZE);
 	return rc;
 }
-
-struct cucb_data {
-        char *page;
-        int count;
-        int idx;
-};
+LPROC_SEQ_FOPS(mdd_changelog_mask);
 
 static int lprocfs_changelog_users_cb(const struct lu_env *env,
 				      struct llog_handle *llh,
 				      struct llog_rec_hdr *hdr, void *data)
 {
-        struct llog_changelog_user_rec *rec;
-        struct cucb_data *cucb = (struct cucb_data *)data;
-
-        LASSERT(llh->lgh_hdr->llh_flags & LLOG_F_IS_PLAIN);
+	struct llog_changelog_user_rec *rec;
+	struct seq_file *m = data;
 
-        rec = (struct llog_changelog_user_rec *)hdr;
+	LASSERT(llh->lgh_hdr->llh_flags & LLOG_F_IS_PLAIN);
 
-        cucb->idx += snprintf(cucb->page + cucb->idx, cucb->count - cucb->idx,
-                              CHANGELOG_USER_PREFIX"%-3d "LPU64"\n",
-                              rec->cur_id, rec->cur_endrec);
-        if (cucb->idx >= cucb->count)
-                return -ENOSPC;
+	rec = (struct llog_changelog_user_rec *)hdr;
 
-        return 0;
+	seq_printf(m, CHANGELOG_USER_PREFIX"%-3d "LPU64"\n",
+		   rec->cur_id, rec->cur_endrec);
+	return 0;
 }
 
-static int lprocfs_rd_changelog_users(char *page, char **start, off_t off,
-                                      int count, int *eof, void *data)
+static int mdd_changelog_users_seq_show(struct seq_file *m, void *data)
 {
 	struct lu_env		 env;
-	struct mdd_device	*mdd = data;
+	struct mdd_device	*mdd = m->private;
 	struct llog_ctxt	*ctxt;
-	struct cucb_data	 cucb;
 	__u64			 cur;
 	int			 rc;
 
-        *eof = 1;
-
         ctxt = llog_get_context(mdd2obd_dev(mdd),
 				LLOG_CHANGELOG_USER_ORIG_CTXT);
         if (ctxt == NULL)
@@ -223,37 +164,31 @@ static int lprocfs_rd_changelog_users(char *page, char **start, off_t off,
 	cur = mdd->mdd_cl.mc_index;
 	spin_unlock(&mdd->mdd_cl.mc_lock);
 
-        cucb.count = count;
-        cucb.page = page;
-        cucb.idx = 0;
-
-        cucb.idx += snprintf(cucb.page + cucb.idx, cucb.count - cucb.idx,
-                              "current index: "LPU64"\n", cur);
-
-        cucb.idx += snprintf(cucb.page + cucb.idx, cucb.count - cucb.idx,
-                              "%-5s %s\n", "ID", "index");
+	seq_printf(m, "current index: "LPU64"\n", cur);
+	seq_printf(m, "%-5s %s\n", "ID", "index");
 
 	llog_cat_process(&env, ctxt->loc_handle, lprocfs_changelog_users_cb,
-			 &cucb, 0, 0);
+			 &m, 0, 0);
 
 	lu_env_fini(&env);
 	llog_ctxt_put(ctxt);
-	return cucb.idx;
+	return 0;
 }
+LPROC_SEQ_FOPS_RO(mdd_changelog_users);
 
-static int lprocfs_rd_sync_perm(char *page, char **start, off_t off,
-                                int count, int *eof, void *data)
+static int mdd_sync_perm_seq_show(struct seq_file *m, void *data)
 {
-        struct mdd_device *mdd = data;
+	struct mdd_device *mdd = m->private;
 
-        LASSERT(mdd != NULL);
-        return snprintf(page, count, "%d\n", mdd->mdd_sync_permission);
+	LASSERT(mdd != NULL);
+	return seq_printf(m, "%d\n", mdd->mdd_sync_permission);
 }
 
-static int lprocfs_wr_sync_perm(struct file *file, const char *buffer,
-                                unsigned long count, void *data)
+static ssize_t
+mdd_sync_perm_seq_write(struct file *file, const char *buffer,
+			size_t count, loff_t *off)
 {
-        struct mdd_device *mdd = data;
+	struct mdd_device *mdd = ((struct seq_file *)file->private_data)->private;
         int val, rc;
 
         LASSERT(mdd != NULL);
@@ -264,24 +199,21 @@ static int lprocfs_wr_sync_perm(struct file *file, const char *buffer,
         mdd->mdd_sync_permission = !!val;
         return count;
 }
+LPROC_SEQ_FOPS(mdd_sync_perm);
 
-static int lprocfs_rd_lfsck_speed_limit(char *page, char **start, off_t off,
-					int count, int *eof, void *data)
+static int mdd_lfsck_speed_limit_seq_show(struct seq_file *m, void *data)
 {
-	struct mdd_device *mdd = data;
-	int rc;
+	struct mdd_device *mdd = m->private;
 
 	LASSERT(mdd != NULL);
-	*eof = 1;
-
-	rc = lfsck_get_speed(mdd->mdd_bottom, page, count);
-	return rc != 0 ? rc : count;
+	return lfsck_get_speed(m, mdd->mdd_bottom);
 }
 
-static int lprocfs_wr_lfsck_speed_limit(struct file *file, const char *buffer,
-					unsigned long count, void *data)
+static ssize_t
+mdd_lfsck_speed_limit_seq_write(struct file *file, const char *buffer,
+				size_t count, loff_t *off)
 {
-	struct mdd_device *mdd = data;
+	struct mdd_device *mdd = ((struct seq_file *)file->private_data)->private;
 	__u32 val;
 	int rc;
 
@@ -293,40 +225,67 @@ static int lprocfs_wr_lfsck_speed_limit(struct file *file, const char *buffer,
 	rc = lfsck_set_speed(mdd->mdd_bottom, val);
 	return rc != 0 ? rc : count;
 }
+LPROC_SEQ_FOPS(mdd_lfsck_speed_limit);
 
-static int lprocfs_rd_lfsck_namespace(char *page, char **start, off_t off,
-				      int count, int *eof, void *data)
+static int mdd_lfsck_namespace_seq_show(struct seq_file *m, void *data)
 {
-	struct mdd_device *mdd = data;
-	int rc;
+	struct mdd_device *mdd = m->private;
 
 	LASSERT(mdd != NULL);
-	*eof = 1;
-
-	rc = lfsck_dump(mdd->mdd_bottom, page, count, LT_NAMESPACE);
-	return rc;
+	return lfsck_dump(m, mdd->mdd_bottom, LT_NAMESPACE);
 }
-
-static struct lprocfs_vars lprocfs_mdd_obd_vars[] = {
-        { "atime_diff",      lprocfs_rd_atime_diff, lprocfs_wr_atime_diff, 0 },
-        { "changelog_mask",  lprocfs_rd_changelog_mask,
-                             lprocfs_wr_changelog_mask, 0 },
-        { "changelog_users", lprocfs_rd_changelog_users, 0, 0},
-        { "sync_permission", lprocfs_rd_sync_perm, lprocfs_wr_sync_perm, 0 },
-	{ "lfsck_speed_limit", lprocfs_rd_lfsck_speed_limit,
-			       lprocfs_wr_lfsck_speed_limit, 0 },
-	{ "lfsck_namespace", lprocfs_rd_lfsck_namespace, 0, 0 },
+LPROC_SEQ_FOPS_RO(mdd_lfsck_namespace);
+
+static struct lprocfs_seq_vars lprocfs_mdd_obd_vars[] = {
+	{ "atime_diff",		&mdd_atime_diff_fops		},
+	{ "changelog_mask",	&mdd_changelog_mask_fops	},
+	{ "changelog_users",	&mdd_changelog_users_fops	},
+	{ "sync_permission",	&mdd_sync_perm_fops		},
+	{ "lfsck_speed_limit",	&mdd_lfsck_speed_limit_fops	},
+	{ "lfsck_namespace",	&mdd_lfsck_namespace_fops	},
 	{ 0 }
 };
 
-static struct lprocfs_vars lprocfs_mdd_module_vars[] = {
-        { "num_refs",   lprocfs_rd_numrefs, 0, 0 },
-        { 0 }
-};
-
-void lprocfs_mdd_init_vars(struct lprocfs_static_vars *lvars)
+int mdd_procfs_init(struct mdd_device *mdd, const char *name)
 {
-        lvars->module_vars  = lprocfs_mdd_module_vars;
-        lvars->obd_vars     = lprocfs_mdd_obd_vars;
+	struct obd_device *obd = class_name2obd(name);
+	struct obd_type	  *type;
+	int		  rc;
+	ENTRY;
+
+	/* at the moment there is no linkage between lu_type
+	 * and obd_type, so we lookup obd_type this way */
+	type = class_search_type(LUSTRE_MDD_NAME);
+
+	LASSERT(name != NULL);
+	LASSERT(type != NULL);
+	LASSERT(obd  != NULL);
+
+	/* Find the type procroot and add the proc entry for this device */
+	obd->obd_vars = lprocfs_mdd_obd_vars;
+	mdd->mdd_proc_entry = lprocfs_seq_register(name, type->typ_procroot,
+						   obd->obd_vars, mdd);
+	if (IS_ERR(mdd->mdd_proc_entry)) {
+		rc = PTR_ERR(mdd->mdd_proc_entry);
+		CERROR("Error %d setting up lprocfs for %s\n",
+			rc, name);
+		mdd->mdd_proc_entry = NULL;
+		GOTO(out, rc);
+	}
+	rc = 0;
+
+	EXIT;
+out:
+	if (rc)
+		mdd_procfs_fini(mdd);
+	return rc;
 }
 
+int mdd_procfs_fini(struct mdd_device *mdd)
+{
+	if (mdd->mdd_proc_entry) {
+		lprocfs_remove(&mdd->mdd_proc_entry);
+		mdd->mdd_proc_entry = NULL;
+	}
+	RETURN(0);
+}
-- 
1.8.5.1

